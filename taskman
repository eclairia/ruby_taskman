#!/usr/bin/env ruby

class Task

	OPTIONS_DEFAULT = {
		flags: [],
		date: nil
	}

	#Retourne une tâche
	def self.ajouter params
		contenu = params.shift
		id = @tableau_taches.map{ |tache| tache.id}.max+1

		new_task = Task.new id, contenu

		#On ajoute un élémént dans le tableau
		#.map est comme .each et permet de rajouter un élément à chaque élément du tableau
		#tache[:id] = @tableau_taches.map{ |tache| tache[:id]}.max+1

		#La fonction merge permet d'initiser le hash tache avec les données 
		#de OPTIONS_DEFAULT
		#Cela permet ainsi de mettre ses données dans tache[champ.to_sym]
		#tache.merge!(Task::OPTIONS_DEFAULT)

		#tache[:content] = contenu
		params.each do |argument|
			#On sépare le champ de la valeur grâce au séparateur ":"
			champ, valeur = argument.split(":")

			if champ == "flags"
				new_task.flags = valeur.split(",")
				#tache[champ.to_sym] = valeur.split(",")
			else
				raise "Paramètre incorrect: #{champ}"
				#tache[champ.to_sym] = valeur
			end
		end
		#Code de retour de la fonction
		@tableau_taches << new_task
	end

	def self.supprimer id
		#reject{} attend que l'élément renvoie vrai ou faux
		#S'il renvoie vrai, l'élément est rejetté du tableau final
		@tableau_taches.reject!{ |tache| tache.id == id }
	end

	def self.afficher
		puts "***TASKMAN***"
		puts "Liste des taches"

		#@tableau_taches.each(&:display)
		@tableau_taches.each{|tache| tache.afficher }
	end	

	#attr_accessor :id correspond à tout le code ci-dessous
	#def id
	#	@id
	#end
	#def id = x
	#	@id = x
	#end
	attr_accessor :id, :content, :flags
	#attr_reader permet de lire en lecture seule
	#On ne peut pas moodifier le contenu de la variable
	#quand la tâche a été faite
	attr_reader :is_done

	def initialize id, content, opts={}
		opts = OPTIONS_DEFAULT.merge(opts)
		@id = id
		@content = content
		@flags = opts[:flags]
		@is_done = false
	end

	def afficher
		puts "[#{ @is_done ? "X" : " "}] #{@id} - #{@content} - (#{@flags.join(",")})"
	end

	def done
		@is_done = true
	end

	@tableau_taches = [
		Task.new(0, "Améliorer Taskman", flags:%w(important urgent))
		#[0, "ameliorer taskman", "flags", "important, urgent"]	
	]		
end

#def on_command action
#	$command ||= ARGV.shift
#
#	if not block_given?
#		#raise: gestion des exceptions
#		raise "on_command a besoin d'un block"
#	end	
#
#	if $command == action
#		yield(ARGV)
#		$command_faite = true
#	end
#end

module Command

	@commandes = {}

	def self.register command, arguments, description, &block
		#Hash qui contient des hash
		@commandes[command] = {
			keyword: command,
			arguments: arguments,
			description: description,
			block: block
		}
	end

	def self.lancer!
		command = ARGV.shift

		commande_executee = false
		@commandes.each do |k, v|
			if k == command
				commande_executee = true
				v[:block].call(ARGV	)
			end
		end

		#unless = if not
		unless commande_executee
			afficher_aide
		end
	end	

	def self.afficher_aide
		puts "taskman [commande], [contenu], [options...]"
		puts "..........................................."
		@commandes.each do |k, v|
			puts "#{v[:keyword]}\t\t #{v[:arguments]}\t\t #{:description}"
		end
		#puts "add :id\t\t* Ajouter une tache"
		#puts "mod :id\t\t* Modifier la tache avec l'identifiant :id"
		#puts "del :contenu (options...)\t\t* Supprimer la tache avec l'identifiant :id"
		#puts "list :filtre\t\t* Liste des taches selon le filtre donné"
	end	

	def self.on_else_command 
		if $command_faite.nil?
			yield(ARGV)
		end
	end
end

#Enregistre cette commande dans un  hash de fonctions
Command.register 'add', ':contenu (options...)', 'Créer une nouvelle tache' do |arguments|
	Task.ajouter(arguments)
end	

#Enregistre cette commande dans un  hash de fonctions
Command.register 'del', ':id', 'Supprimer une tache' do |arguments|
	Task.supprimer arguments.shift.to_i
end

#Enregistre cette commande dans un  hash de fonctions
Command.register 'mod', ':id (options...)', 'Modifier une tache' do |arguments|
	#A faire: modifier toutes les tâches
end

#Enregistre cette commande dans un  hash de fonctions
Command.register 'list', ':filtre', 'Liste des taches' do |arguments|
	Task.afficher
end

#Enregistre cette commande dans un  hash de fonctions
Command.register 'clear', '', 'Supprime toutes les taches' do |arguments|
	#A faire: Supprimer toutes les tâches
end

Command.lancer!

Task.afficher